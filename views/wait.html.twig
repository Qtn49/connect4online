{% extends 'base.html.twig' %}

{% block body %}

    {{ parent() }}

    <div class="container">
        <div class="row justify-content-md-center">
            <h1>Bienvenue {{ pseudo }}</h1>
        </div>
    </div>

    <div class="container mt-5" id="listUser">
        <div class="row justify-content-md-center" id="user" style="visibility: hidden">
            <p class="border border-warning p-2"><strong class="mr-2">legrobigbossdu54 </strong><a href="#" class="btn btn-success" onclick="invite(this.parentElement)">invite</a></p>
        </div>
    </div>

{% endblock %}

{% block script %}

    {{ parent() }}

    <script>
        const ws = new WebSocket("ws://localhost:9000");
        const sep = '#';
        let list = document.getElementById('listUser');
        let user = document.getElementById('user');
        var id = "{{ id }}";

        ws.onopen = () => {
            ws.send('newPlayer' + sep + id);
            console.log('newPlayer' + sep + id);
        };

        function cleanList() {

            while (list.firstChild)
                list.removeChild(list.lastChild);

        }

        ws.onmessage = (message) => {

            let data = message.data.split(sep);

            switch (data[0]) {

                case 'newPlayer':

                    let players = JSON.parse(data[1]);

                    console.log(players);
                    cleanList();

                    for (let [, player] of Object.entries(players)) {

                        if (player._id === id)
                            continue;

                        let newUser = user.cloneNode(true);

                        newUser.setAttribute('playerId', player._id);
                        newUser.style.visibility = "visible";
                        newUser.querySelector('strong').textContent = player._pseudo;

                        list.appendChild(newUser);

                    }
                    break;

                case 'invite':
                    let player = data[1];
                    console.log(ws);
                    invitation(data[1], data[2]);
                    break;

                case 'startGame':
                    console.log(ws);
                    location.href = '/newMultiGame?id=' + id + '&idOpponent=' + data[1];
                    break;

            }

        };

        function invitation (idOpponent, pseudo) {

            bootbox.confirm({
                message: pseudo + " invited you, do you wanna play ?",
                buttons: {
                    cancel: {
                        label: '<i class="fa fa-times"></i> Cancel'
                    },
                    confirm: {
                        label: '<i class="fa fa-check"></i> Confirm'
                    }
                },
                callback: function (result) {
                    if (result) {
                        location.href = '/newMultiGame?invited=true&id=' + id + '&idOpponent=' + idOpponent;
                    }
                }
            });

        }

        function invite (element) {

            if (element.querySelector('a').textContent === 'inviting...')
                return false;
            else
                element.querySelector('a').textContent = 'inviting...';

            ws.send('invite' + sep + element.parentElement.getAttribute('playerId') + sep + id);

            return false;

        }

    </script>

{% endblock %}
